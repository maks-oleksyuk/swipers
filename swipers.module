<?php

/**
 * @file
 * Defines Drupal hooks for Swipers module.
 */

use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function swipers_theme($existing, $type, $theme, $path): array {
  return [
    'swiper_studio_page' => [
      'base hook' => 'page',
      'path' => $path . '/templates/page',
    ],
    'swiper_studio_label' => [
      'base hook' => 'form-element',
      'render element' => 'element',
      'path' => $path . '/templates/form',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function swipers_theme_suggestions_page_alter(array &$suggestions, array $variables): array {
  switch (\Drupal::routeMatch()->getRouteName()) {
    case 'entity.slider.add_form':
    case 'entity.slider.edit_form':
      $suggestions[] = 'swiper_studio_page';
      break;

    default:
      break;
  }
  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function swipers_preprocess_page(&$variables) {
  $route_match = \Drupal::routeMatch();
  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_list */
  $module_list = \Drupal::service('extension.list.module');
  $route_name = $route_match->getRouteName();
  switch ($route_name) {
    case 'entity.slider.add_form':
    case 'entity.slider.edit_form':
      if ($route_name === 'entity.slider.edit_form') {
        $variables['page']['label'] = $route_match->getParameters()
          ->get('slider')
          ->label();
      }
      $variables['module_path'] = base_path() . $module_list->getPath('swipers');
      $variables['#attached']['library'][] = 'swipers/swiper-studio';
      break;

    default:
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function swipers_preprocess_swiper_studio_label(&$variables) {
  $element = &$variables['element'];

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by
  // \Drupal::formBuilder()->doBuildForm().
  $element += [
    '#title_display' => 'before',
    '#wrapper_attributes' => [],
    '#label_attributes' => [],
    '#label_for' => NULL,
  ];
  $variables['attributes'] = $element['#wrapper_attributes'];

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $variables['attributes']['id'] = $element['#id'];
  }

  // Pass elements #type and #name to template.
  if (!empty($element['#type'])) {
    $variables['type'] = $element['#type'];
  }
  if (!empty($element['#name'])) {
    $variables['name'] = $element['#name'];
  }

  // Pass elements disabled status to template.
  $variables['disabled'] = !empty($element['#attributes']['disabled']) ? $element['#attributes']['disabled'] : NULL;

  // Suppress error messages.
  $variables['errors'] = NULL;

  // If #title is not set, we don't display any label.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }

  $variables['title_display'] = $element['#title_display'];

  $variables['prefix'] = $element['#field_prefix'] ?? NULL;
  $variables['suffix'] = $element['#field_suffix'] ?? NULL;

  $variables['description'] = NULL;
  if (!empty($element['#description'])) {
    $variables['description_display'] = $element['#description_display'];
    $description_attributes = [];
    if (!empty($element['#id'])) {
      $description_attributes['id'] = $element['#id'] . '--description';
    }
    $variables['description']['attributes'] = new Attribute($description_attributes);
    $variables['description']['content'] = $element['#description'];
  }

  // Add label_display and label variables to template.
  $variables['label_display'] = $element['#title_display'];
  $variables['label'] = ['#theme' => 'form_element_label'];
  $variables['label'] += array_intersect_key($element, array_flip([
    '#id',
    '#required',
    '#title',
    '#title_display',
  ]));
  $variables['label']['#attributes'] = $element['#label_attributes'];
  if (!empty($element['#label_for'])) {
    $variables['label']['#for'] = $element['#label_for'];
    if (!empty($element['#id'])) {
      $variables['label']['#id'] = $element['#id'] . '--label';
    }
  }

  $variables['children'] = $element['#children'];
}